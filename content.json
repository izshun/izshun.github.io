[{"title":"采用 K-Means 聚类算法分析 GPS 轨迹","date":"2020-02-14T02:20:21.451Z","path":"2020/02/14/采用 K-Means 聚类算法分析 GPS 轨迹/","text":"数据集来源Geolife 加载数据12345678910111213141516import numpy as npimport matplotlib.pyplot as pltimport pandas as pdimport osfrom matplotlib.colors import rgb2hexfrom shapely.geometry import MultiPointfrom geopy.distance import great_circlefrom sklearn.cluster import KMeansfrom sklearn.cluster import DBSCANuserdata = 'd:/Lab-work/Geolife Trajectories 1.3/Data/001/Trajectory/'filelist = os.listdir(userdata)names = ['lat','lng','zero','alt','days','date','time']df_list = [pd.read_csv(userdata + f,header=6,names=names,index_col=False) for f in filelist] df = pd.concat(df_list, ignore_index=True)print(df.head(10))plt.plot(df.lat, df.lng) 123456789101112 lat lng zero alt days date time0 39.984198 116.319322 0 492 39744.245208 2008-10-23 05:53:061 39.984224 116.319402 0 492 39744.245266 2008-10-23 05:53:112 39.984211 116.319389 0 492 39744.245324 2008-10-23 05:53:163 39.984217 116.319422 0 491 39744.245382 2008-10-23 05:53:214 39.984710 116.319865 0 320 39744.245405 2008-10-23 05:53:235 39.984674 116.319810 0 325 39744.245463 2008-10-23 05:53:286 39.984623 116.319773 0 326 39744.245521 2008-10-23 05:53:337 39.984606 116.319732 0 327 39744.245579 2008-10-23 05:53:388 39.984555 116.319728 0 324 39744.245637 2008-10-23 05:53:439 39.984579 116.319769 0 309 39744.245694 2008-10-23 05:53:48[&lt;matplotlib.lines.Line2D at 0x17efc43eac8&gt;] 39eBMn.png K-Means123456789coords = df[['lat','lng']].valuesn_clusters = 100cls = KMeans(n_clusters).fit(coords)colors = tuple([(np.random.random(),np.random.random(), np.random.random()) for i in range(n_clusters)])colors = [rgb2hex(x) for x in colors]for i, color in enumerate(colors): members = cls.labels_ == i plt.scatter(coords[members, 0], coords[members, 1], s=60, c=color, alpha=0.5)plt.show() 39mlYF.png 获取 K-Means 聚类结果12345cluster_labels = cls.labels_num_clusters = len(set(cluster_labels) - set([-1]))print('Clustered ' + str(len(df_min)) + ' points to ' + str(num_clusters) + ' clusters')clusters = pd.Series([coords[cluster_labels == n] for n in range(num_clusters)])print(clusters) 12345678910111213Clustered 9045 points to 100 clusters0 [[40.014459, 116.305603], [40.014363, 116.3056...1 [[39.975246000000006, 116.358976], [39.975244,...2 [[40.001312, 116.193358], [40.001351, 116.1932...3 [[39.984559000000004, 116.326696], [39.984669,...4 [[39.964969, 116.434923], [39.964886, 116.4350... ... 95 [[40.004549, 116.260581], [40.004515999999995,...96 [[39.97964, 116.323856], [39.979701, 116.32396...97 [[40.0009, 116.23948500000002], [40.000831, 11...98 [[39.962336, 116.32817800000001], [39.96223300...99 [[39.9663, 116.353677], [39.966291999999996, 1...Length: 100, dtype: object 获取每个群集每个中心点12345678def get_centermost_point(cluster): centroid = (MultiPoint(cluster).centroid.x, MultiPoint(cluster).centroid.y) centermost_point = min(cluster, key=lambda point: great_circle(point, centroid).m) return tuple(centermost_point)centermost_points = clusters.map(get_centermost_point)lats, lons = zip(*centermost_points)rep_points = pd.DataFrame(&#123;'lon':lons, 'lat':lats&#125;)print(rep_points) 1234567891011121314 lon lat0 116.306558 40.0137511 116.353295 39.9753572 116.190167 40.0042903 116.326944 39.9864924 116.438241 39.961273.. ... ...95 116.256309 40.00477496 116.326462 39.97875297 116.232672 39.99863098 116.328847 39.95827199 116.358655 39.966451[100 rows x 2 columns] 描绘中心点12345678910111213141516171819fig, ax = plt.subplots(figsize=[10, 6])rs_scatter = ax.scatter(rep_points['lon'][0], rep_points['lat'][0], c='#99cc99', edgecolor='None', alpha=0.7, s=450)ax.scatter(rep_points['lon'][1], rep_points['lat'][1], c='#99cc99', edgecolor='None', alpha=0.7, s=250)ax.scatter(rep_points['lon'][2], rep_points['lat'][2], c='#99cc99', edgecolor='None', alpha=0.7, s=250)ax.scatter(rep_points['lon'][3], rep_points['lat'][3], c='#99cc99', edgecolor='None', alpha=0.7, s=150)df_scatter = ax.scatter(df_min['lng'], df_min['lat'], c='k', alpha=0.9, s=3)ax.set_title('Full GPS trace vs. DBSCAN clusters')ax.set_xlabel('Longitude')ax.set_ylabel('Latitude')ax.legend([df_scatter, rs_scatter], ['GPS points', 'Cluster centers'], loc='upper right')labels = ['cluster&#123;0&#125;'.format(i) for i in range(1, num_clusters+1)]for label, x, y in zip(labels, rep_points['lon'], rep_points['lat']): plt.annotate( label, xy = (x, y), xytext = (-25, -30), textcoords = 'offset points', ha = 'right', va = 'bottom', bbox = dict(boxstyle = 'round,pad=0.5', fc = 'white', alpha = 0.5), arrowprops = dict(arrowstyle = '-&gt;', connectionstyle = 'arc3,rad=0'))plt.show() 39n7CD.png","tags":[{"name":"聚类","slug":"聚类","permalink":"https://izshun.github.io/tags/%E8%81%9A%E7%B1%BB/"}]}]